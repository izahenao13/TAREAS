
#include <iostream>
using namespace std;

void foo_funtion(void);
void Init_Fifo(void);
void Write_Fifo(void);
void Read_Fifo(void);
int i=0, b=0;  // valor global para foo funtion
int FIFO[19];
//int save=0;
int *ptrP=nullptr;
int pass=3;
int *ptrW=nullptr;
int *ptrR=nullptr;
//int *ptrP=nullptr;

struct MiEstructura1
{
    int d1= 5;
    char d2='b';
    float d3= 3.877;
    char d4= 'e';
    double d5= 3.242526242526;
    int d6= 45;
}varstruct1;




struct MiEstructura2
{
    int a= 0;
    int b= 0;
    float c= 2.00;
    char d= 'e';
    char e= 'g';
    double f= 0.00;

}varstruct2;




int main()
{
    int str1_int1;
    //int *ptr=nullptr;
    char *my_string = "Esta es mi cadena";

    std::cout<<"Cadena my_string: ";

    //MiEstructura1 *ptr1=&varstruct1;
    
   //str1_int1=(*ptr1->d1);
   
   //struct1
   varstruct1.d1;
   MiEstructura1 *ptr=&varstruct1;
   std::cout<<"valor de int1 estructura 1: "<<ptr->d1<<"\n";
   std::cout<<"valor de char estructura 1: "<<ptr->d2<<"\n";
   std::cout<<"valor de float estructura 1: "<<ptr->d3<<"\n";
   std::cout<<"valor de char estructura 1: "<<ptr->d4<<"\n";
   std::cout<<"valor de double estructura 1: "<<ptr->d5<<"\n";
   std::cout<<"valor de int estructura 1: "<<ptr->d6<<"\n";
   
   //struct2
   
   varstruct2.a;
   MiEstructura2 *ptr2=&varstruct2;
   std::cout<<"valor de int1 estructura 2: "<<ptr2->a<<"\n";
   std::cout<<"valor de char estructura 2: "<<ptr2->b<<"\n";
   std::cout<<"valor de float estructura 2: "<<ptr2->c<<"\n";
   std::cout<<"valor de char estructura 2: "<<ptr2->d<<"\n";
   std::cout<<"valor de double estructura 2: "<<ptr2->f<<"\n";
   
   
  // casting Estructura 1 
  std::cout<<"type casting "<<*((int*)ptr); "\endl"; 
  std::cout<<"type casting "<<*((char*)ptr+4); "\endl"; 
  std::cout<<"type casting "<<*((float*)ptr+2); "\endl"; 
  std::cout<<"type casting "<<*((char*)ptr+12); "\endl"; 
  std::cout<<"type casting "<<*((double*)ptr+12); "\endl"; 
  std::cout<<"type casting "<<*((int*)ptr+23); "\endl"; 
  
 
   
   
  // casting Estructura 2 
  //std::cout<<*((int*)ptr)<<;  //ir contando la posicion del tipo de dato(int 4 bytes )
  std::cout<<"type casting "<<*((int*)ptr);"\endl"; 
  std::cout<<"type casting "<<*((char*)ptr+4); "\endl"; 
  std::cout<<"type casting "<<*((float*)ptr+2);"\endl";  
  std::cout<<"type casting "<<*((char*)ptr+12); "\endl"; 
  std::cout<<"type casting "<<*((double*)ptr+2);"\endl"; 
  
    //Funcion Size 
    //(Tama単o de la Estructura 1)
   std::cout << "El tama単o de la estructura 1 es: " << sizeof(MiEstructura1) <<"\endl";

    //(Tama単o de la Estructura 2)
   std::cout << "El tama単o de la estructura 2 es: " << sizeof(MiEstructura2) <<"\endl";
   
 
    
   // Funcion Foo

   foo_funtion();
   foo_funtion();
   foo_funtion();
   foo_funtion();

   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   Write_Fifo();
   
  return 0;
}

void foo_funtion(void)
{
    int arreglo[4]={2,4,6,8};
    int *ptr3;
    ptr3 = arreglo;
    std::cout<< "puntero vector "<<*(ptr3+i)<< std::endl;
    i= i+1;

    if(i>=4){
    i=0;
    }

}



void Init_Fifo(void)
{
    ptrR=&FIFO[0];
    ptrW=&FIFO[0];

}




void Write_Fifo(void)
{

if (b<20)
    {  
       int *ptrP=pass; 
        ptrW+b==0;
        cout<<"posicion "<<b<<" es "<< FIFO[b]<<"\n\n";
        b=b+1;
    }
else {
    b=0;

 cout<<"la fifo esta llena"<<"\n\n";
    }


}
